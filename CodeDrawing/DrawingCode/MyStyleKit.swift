//
//  StyleKitName.swift
//  ProjectName
//
//  Created by Lea on 6/26/16.
//  Copyright (c) 2016 ITPCamp. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class MyStyleKit : NSObject {
    
    //// Cache
    
    private struct Cache {
        static let fillColor: UIColor = UIColor(red: 0.592, green: 0.592, blue: 0.592, alpha: 1.000)
        static let color: UIColor = UIColor(red: 0.699, green: 0.056, blue: 0.056, alpha: 1.000)
        static let color2: UIColor = UIColor(red: 0.687, green: 0.682, blue: 0.959, alpha: 1.000)
        static let gradientColor: UIColor = UIColor(red: 0.000, green: 0.474, blue: 0.561, alpha: 1.000)
        static let gradient2Color: UIColor = UIColor(red: 0.824, green: 0.829, blue: 0.169, alpha: 1.000)
        static let gradient2Color2: UIColor = UIColor(red: 0.743, green: 0.525, blue: 0.183, alpha: 1.000)
        static let gradient: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [UIColor.redColor().CGColor, UIColor.redColor().blendedColorWithFraction(0.5, ofColor: UIColor.whiteColor()).CGColor, UIColor.whiteColor().CGColor, UIColor.whiteColor().blendedColorWithFraction(0.5, ofColor: MyStyleKit.gradientColor).CGColor, MyStyleKit.gradientColor.CGColor], [0, 0.14, 0.47, 0.84, 1])!
        static let gradient2: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [MyStyleKit.gradient2Color2.CGColor, MyStyleKit.gradient2Color2.blendedColorWithFraction(0.5, ofColor: MyStyleKit.gradient2Color).CGColor, MyStyleKit.gradient2Color.CGColor, UIColor.whiteColor().CGColor], [0.02, 0.21, 0.44, 1])!
        static let shadow: NSShadow = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.14), offset: CGSize(width: 1.1, height: 1.1), blurRadius: 2)
        static let shadow2: NSShadow = NSShadow(color: UIColor.blackColor(), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)
        static var cameraImage: UIImage?
        
    }
    
    //// Colors
    
    public class var fillColor: UIColor { return Cache.fillColor }
    public class var color: UIColor { return Cache.color }
    public class var color2: UIColor { return Cache.color2 }
    public class var gradientColor: UIColor { return Cache.gradientColor }
    public class var gradient2Color: UIColor { return Cache.gradient2Color }
    public class var gradient2Color2: UIColor { return Cache.gradient2Color2 }
    
    //// Gradients
    
    public class var gradient: CGGradient { return Cache.gradient }
    public class var gradient2: CGGradient { return Cache.gradient2 }
    
    //// Shadows
    
    public class var shadow: NSShadow { return Cache.shadow }
    public class var shadow2: NSShadow { return Cache.shadow2 }
    
    //// Images
    
    public class var cameraImage: UIImage {
        if Cache.cameraImage == nil {
            Cache.cameraImage = UIImage(named: "cameraImage.png")!
        }
        return Cache.cameraImage!
    }
    
    //// Drawing Methods
    
    public class func drawCamera() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Color Declarations
        let strokeColor = UIColor(red: 0.592, green: 0.592, blue: 0.592, alpha: 1.000)
        
        //// Group 2
        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPoint(x: 0, y: 39))
        clipPath.addCurveToPoint(CGPoint(x: 29.01, y: 10), controlPoint1: CGPoint(x: 0, y: 22.98), controlPoint2: CGPoint(x: 12.98, y: 10))
        clipPath.addLineToPoint(CGPoint(x: 80.99, y: 10))
        clipPath.addCurveToPoint(CGPoint(x: 110, y: 39), controlPoint1: CGPoint(x: 97.01, y: 10), controlPoint2: CGPoint(x: 110, y: 22.98))
        clipPath.addLineToPoint(CGPoint(x: 110, y: 68))
        clipPath.addCurveToPoint(CGPoint(x: 80.99, y: 97), controlPoint1: CGPoint(x: 110, y: 84.02), controlPoint2: CGPoint(x: 97.02, y: 97))
        clipPath.addLineToPoint(CGPoint(x: 29.01, y: 97))
        clipPath.addCurveToPoint(CGPoint(x: 0, y: 68), controlPoint1: CGPoint(x: 12.99, y: 97), controlPoint2: CGPoint(x: 0, y: 84.02))
        clipPath.addLineToPoint(CGPoint(x: 0, y: 39))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;
        
        clipPath.addClip()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 0, y: 39))
        bezierPath.addCurveToPoint(CGPoint(x: 29.01, y: 10), controlPoint1: CGPoint(x: 0, y: 22.98), controlPoint2: CGPoint(x: 12.98, y: 10))
        bezierPath.addLineToPoint(CGPoint(x: 80.99, y: 10))
        bezierPath.addCurveToPoint(CGPoint(x: 110, y: 39), controlPoint1: CGPoint(x: 97.01, y: 10), controlPoint2: CGPoint(x: 110, y: 22.98))
        bezierPath.addLineToPoint(CGPoint(x: 110, y: 68))
        bezierPath.addCurveToPoint(CGPoint(x: 80.99, y: 97), controlPoint1: CGPoint(x: 110, y: 84.02), controlPoint2: CGPoint(x: 97.02, y: 97))
        bezierPath.addLineToPoint(CGPoint(x: 29.01, y: 97))
        bezierPath.addCurveToPoint(CGPoint(x: 0, y: 68), controlPoint1: CGPoint(x: 12.99, y: 97), controlPoint2: CGPoint(x: 0, y: 84.02))
        bezierPath.addLineToPoint(CGPoint(x: 0, y: 39))
        bezierPath.closePath()
        strokeColor.setStroke()
        bezierPath.lineWidth = 20
        bezierPath.stroke()
        
        
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
        
        
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 77, y: 30, width: 11, height: 11))
        strokeColor.setStroke()
        ovalPath.lineWidth = 5
        ovalPath.stroke()
        
        
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 28, y: 37, width: 39, height: 39))
        strokeColor.setStroke()
        oval2Path.lineWidth = 10
        oval2Path.stroke()
        
        
        //// Group 4
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)
        
        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.moveToPoint(CGPoint(x: 46.5, y: -20.5))
        clip3Path.addLineToPoint(CGPoint(x: 106.5, y: -20.5))
        clip3Path.addLineToPoint(CGPoint(x: 106.5, y: 37.5))
        clip3Path.addLineToPoint(CGPoint(x: 46.5, y: 37.5))
        clip3Path.addLineToPoint(CGPoint(x: 46.5, y: -20.5))
        clip3Path.closePath()
        clip3Path.moveToPoint(CGPoint(x: 67.5, y: 5.99))
        clip3Path.addCurveToPoint(CGPoint(x: 73, y: 0.5), controlPoint1: CGPoint(x: 67.5, y: 2.96), controlPoint2: CGPoint(x: 69.96, y: 0.5))
        clip3Path.addLineToPoint(CGPoint(x: 80, y: 0.5))
        clip3Path.addCurveToPoint(CGPoint(x: 85.5, y: 5.99), controlPoint1: CGPoint(x: 83.03, y: 0.5), controlPoint2: CGPoint(x: 85.5, y: 2.97))
        clip3Path.addLineToPoint(CGPoint(x: 85.5, y: 11.01))
        clip3Path.addCurveToPoint(CGPoint(x: 80, y: 16.5), controlPoint1: CGPoint(x: 85.5, y: 14.04), controlPoint2: CGPoint(x: 83.04, y: 16.5))
        clip3Path.addLineToPoint(CGPoint(x: 73, y: 16.5))
        clip3Path.addCurveToPoint(CGPoint(x: 67.5, y: 11.01), controlPoint1: CGPoint(x: 69.97, y: 16.5), controlPoint2: CGPoint(x: 67.5, y: 14.03))
        clip3Path.addLineToPoint(CGPoint(x: 67.5, y: 5.99))
        clip3Path.closePath()
        clip3Path.moveToPoint(CGPoint(x: 66.5, y: 5.99))
        clip3Path.addLineToPoint(CGPoint(x: 66.5, y: 11.01))
        clip3Path.addCurveToPoint(CGPoint(x: 73, y: 17.5), controlPoint1: CGPoint(x: 66.5, y: 14.59), controlPoint2: CGPoint(x: 69.41, y: 17.5))
        clip3Path.addLineToPoint(CGPoint(x: 80, y: 17.5))
        clip3Path.addCurveToPoint(CGPoint(x: 86.5, y: 11.01), controlPoint1: CGPoint(x: 83.59, y: 17.5), controlPoint2: CGPoint(x: 86.5, y: 14.59))
        clip3Path.addLineToPoint(CGPoint(x: 86.5, y: 5.99))
        clip3Path.addCurveToPoint(CGPoint(x: 80, y: -0.5), controlPoint1: CGPoint(x: 86.5, y: 2.41), controlPoint2: CGPoint(x: 83.59, y: -0.5))
        clip3Path.addLineToPoint(CGPoint(x: 73, y: -0.5))
        clip3Path.addCurveToPoint(CGPoint(x: 66.5, y: 5.99), controlPoint1: CGPoint(x: 69.41, y: -0.5), controlPoint2: CGPoint(x: 66.5, y: 2.41))
        clip3Path.closePath()
        clip3Path.usesEvenOddFillRule = true;
        
        clip3Path.addClip()
        
        
        //// Group 5
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath(roundedRect: CGRect(x: 67, y: 0, width: 19, height: 17), cornerRadius: 6)
        clip2Path.addClip()
        
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 67, y: 0, width: 19, height: 17), cornerRadius: 6)
        MyStyleKit.fillColor.setFill()
        rectanglePath.fill()
        
        
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
        
        
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
        
        
        //// Group 6
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)
        
        //// Clip Clip 4
        let clip4Path = UIBezierPath(roundedRect: CGRect(x: 67, y: 0, width: 19, height: 17), cornerRadius: 6)
        clip4Path.addClip()
        
        
        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 67, y: 0, width: 19, height: 17), cornerRadius: 6)
        strokeColor.setStroke()
        rectangle3Path.lineWidth = 2
        rectangle3Path.stroke()
        
        
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }
    
    public class func drawCircle() {
        
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 78, y: 24, width: 78, height: 78))
        UIColor.grayColor().setFill()
        ovalPath.fill()
    }
    
}



extension UIColor {
    func blendedColorWithFraction(fraction: CGFloat, ofColor color: UIColor) -> UIColor {
        var r1: CGFloat = 1.0, g1: CGFloat = 1.0, b1: CGFloat = 1.0, a1: CGFloat = 1.0
        var r2: CGFloat = 1.0, g2: CGFloat = 1.0, b2: CGFloat = 1.0, a2: CGFloat = 1.0
        
        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)
        
        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
                       green: g1 * (1 - fraction) + g2 * fraction,
                       blue: b1 * (1 - fraction) + b2 * fraction,
                       alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
